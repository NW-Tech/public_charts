# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

cluster:
  enabled: true

  version:
    postgresql: "17"

  type: postgresql

  cluster:
    instances: 2
    # https://cloudnative-pg.io/documentation/preview/replication/#logical-decoding-slot-synchronization
    replicationSlots:
      highAvailability:
        synchronizeLogicalDecoding: true
    storage:
      size: 15Gi
    walStorage:
      size: 10Gi
    monitoring:
      enabled: true
    initdb:
      database: # to_set
      owner: # to_set
      secret:
        name: pg-app-credentials

    postgresql:
      parameters:
        pg_stat_statements.max: "10000"
        pg_stat_statements.track: all
        max_wal_senders: "10"
        max_wal_size: 2GB
        max_replication_slots: "10"
        max_slot_wal_keep_size: 5GB
        hot_standby_feedback: "on"
        sync_replication_slots: "on"

    serviceAccountTemplate:
      metadata:
        annotations:
          iam.gke.io/gcp-service-account: # from_cd

    roles:
      - name: warehouse_replication
        ensure: present
        comment: user for replication
        replication: true
        passwordSecret:
          name: pg-replication-credentials

      - name: open_metadata
        ensure: present
        comment: user for open metadata
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: false
        replication: false
        bypassrls: false
        connectionLimit: 50
        passwordSecret:
          name: pg-omd-credentials

  backups:
    enabled: true
    secret:
      create: false
    provider: google
    google:
      path: # to_set
      bucket: # from_cd
      gkeEnvironment: true

    scheduledBackups:
      - name: daily-backup
        schedule: "0 0 0 * * *" # Daily at midnight

postgresRolesSecrets:
  enabled: true
  data:
    pg-app-credentials:
      username: # to_set
      password: # from_cd
    pg-replication-credentials:
      username: warehouse_replication
      password: # from_cd
    pg-omd-credentials:
      username: open_metadata
      password: # from_cd
    current-prod-pg-password:
      password: #from_cd

replicaCount: 1

serviceAccount:
  create: false

image:
  repository: # from_cd
  pullPolicy: IfNotPresent
  tag: latest

imagePullSecrets: []

containerPort: 8000

ports:
  - containerPort: 8000
    name: http
    protocol: TCP

# By default use an internal load balancer
# If you wnat to use use another type of service, override in parent
service:
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  type: LoadBalancer
  loadBalancerIP: # from_cd
  annotations:
    networking.gke.io/load-balancer-type: Internal

ingress:
  enabled: false

secrets:
  enabled: false

configMap:
  enabled: false

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  # {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 400m
    memory: 1Gi
  requests:
    cpu: 400m
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 90
  targetMemoryUtilizationPercentage: 90

nodeSelector: {}

tolerations: []

affinity: {}
celeryWorker:
  enabled: false
  cluster:
    cluster:
      serviceAccountTemplate:
        metadata:
          annotations:
            iam.gke.io/gcp-service-account: # from_cd
  postgresRolesSecrets:
    data:
      pg-celery-credentials:
        password: # from_cd
  image:
    repository: # from_cd
  secrets:
    enabled: true
    data:
      celery-credentials:
        CELERY_BROKER_PASSWORD: # from_cd
        CELERY_BACKEND_PASSWORD: # from_cd
  configMap:
    enabled: true
    data:
      # CONSTRAINT: Please note this value must equal {{Chart.name}}-rabbitmq
      CELERY_BROKER_HOST: # to_set
  rabbitmq:
    auth:
      username: # from_cd
      password: # from_cd
  celeryFlower:
    enabled: true
    rabbitmq:
      # CONSTRAINT: Please note this value must equal {{Chart.name}}-rabbitmq
      host: # to_set
    service:
      loadBalancerIP: # from_cd
    secrets:
      CELERY_BROKER_PASSWORD: # from_cd
